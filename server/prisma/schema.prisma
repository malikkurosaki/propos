// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id         String       @id @default(cuid())
  name       String
  email      String       @unique
  password   String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Profiles   Profiles?
  Outlets    Outlets[]
  ListBill   ListBill[]
  Employees  Employees[]
  Tokens     Tokens[]
  Categories Categories[]
  Devices    Devices[]
}

model Profiles {
  id        String   @id @default(cuid())
  firstName String?
  lastName  String?
  address   String?
  city      String?
  state     String?
  zip       String?
  phone     String?
  Users     Users?   @relation(fields: [usersId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usersId   String?  @unique
}

model Roles {
  id        String      @id @default(cuid())
  rolesId   Int         @unique
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Employees Employees[]
}

model Employees {
  id        String   @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  zip       String?
  phone     String?
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Roles     Roles?   @relation(fields: [rolesId], references: [rolesId])
  rolesId   Int      @default(3)
  User      Users?   @relation(fields: [usersId], references: [id])
  usersId   String?
}

// info['id'] = id;
// info['model'] = androidInfo.model;
// info['version'] = androidInfo.version.release;
// info['manufacturer'] = androidInfo.manufacturer;
// info['brand'] = androidInfo.brand;
// info['device'] = androidInfo.id;

model Devices {
  id           String   @id @default(cuid())
  deviceId     String?
  model        String?
  version      String?
  manufacturer String?
  brand        String?
  device       String?
  Users        Users?   @relation(fields: [usersId], references: [id])
  usersId      String?
  Outltets     Outlets? @relation(fields: [outletsId], references: [id])
  outletsId    String?
  Tokens       Tokens[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Outlets {
  id          String       @id @default(cuid())
  name        String
  description String?
  address     String?
  phone       String?
  Users       Users?       @relation(fields: [usersId], references: [id])
  usersId     String?
  Categories  Categories[]
  Products    Products[]
  Devices     Devices[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Categories {
  id          String     @id @default(cuid())
  name        String
  description String?
  Products    Products[]
  Outlets     Outlets?   @relation(fields: [outletsId], references: [id])
  outletsId   String?
  User        Users?     @relation(fields: [usersId], references: [id])
  usersId     String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Products {
  id           String         @id @default(cuid())
  name         String
  price        Float
  description  String?
  usersId      String?
  Categories   Categories?    @relation(fields: [categoriesId], references: [id])
  categoriesId String?
  Outlets      Outlets?       @relation(fields: [outletsId], references: [id])
  Bills        Bills[]
  CustomPrices CustomPrices[]
  Images       Images?
  Stocks       Stocks?
  outletsId    String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Images {
  id         String    @id @default(cuid())
  url        String    @default("")
  Product    Products? @relation(fields: [productsId], references: [id])
  productsId String?   @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Stocks {
  id          String    @id @default(cuid())
  quantity    Int       @default(0)
  minQuantity Int       @default(1)
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  productsId  String?   @unique
  Products    Products? @relation(fields: [productsId], references: [id])
}

model CustomPrices {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Product     Products? @relation(fields: [productsId], references: [id])
  productsId  String?

}

/// billId berisi id dari generate bill
model ListBill {
  id          String     @id @default(cuid())
  billsId     String     @unique
  totalQty    Int
  totalItems  Int
  totalPrice  Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Users       Users?     @relation(fields: [usersId], references: [id])
  usersId     String?
  Bills       Bills[]
  BillTypes   BillTypes? @relation(fields: [billTypesId], references: [id])
  billTypesId String?
  pax         Int?
  Customers   Customers? @relation(fields: [customersId], references: [id])
  customersId String?
}

model Customers {
  id        String     @id @default(cuid())
  name      String
  address   String?
  city      String?
  state     String?
  zip       String?
  phone     String?
  email     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ListBill  ListBill[]
}

/// The schema allows the following query:
model BillTypes {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ListBill  ListBill[]

}

model Bills {
  id         String    @id @default(cuid())
  name       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  ListBill   ListBill? @relation(fields: [listBillId], references: [id])
  listBillId String?
  Products   Products? @relation(fields: [productsId], references: [id])
  productsId String?

}

// model token
model Tokens {
  id        String    @id @default(cuid())
  token     String?   @unique @default(uuid())
  Users     Users?    @relation(fields: [usersId], references: [id])
  usersId   String?
  Devices   Devices?  @relation(fields: [devicesId], references: [id])
  devicesId String?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
